// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package query

import (
	"context"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (name)
VALUES (?)
RETURNING id, name
`

func (q *Queries) CreateIngredient(ctx context.Context, name string) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, name)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (name)
VALUES (?)
RETURNING id, name
`

func (q *Queries) CreateRecipe(ctx context.Context, name string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe, name)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createRecipeIngredient = `-- name: CreateRecipeIngredient :one
INSERT INTO recipe_ingredients (recipe_id, ingredient_id, unit_type, percentage, dependency)
VALUES (?, ?, ?, ?, ?)
RETURNING id, recipe_id, ingredient_id, unit_type, percentage, dependency
`

type CreateRecipeIngredientParams struct {
	RecipeID     int64
	IngredientID int64
	UnitType     string
	Percentage   float64
	Dependency   string
}

func (q *Queries) CreateRecipeIngredient(ctx context.Context, arg CreateRecipeIngredientParams) (RecipeIngredient, error) {
	row := q.db.QueryRowContext(ctx, createRecipeIngredient,
		arg.RecipeID,
		arg.IngredientID,
		arg.UnitType,
		arg.Percentage,
		arg.Dependency,
	)
	var i RecipeIngredient
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.IngredientID,
		&i.UnitType,
		&i.Percentage,
		&i.Dependency,
	)
	return i, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE
FROM ingredients
WHERE id = ?
`

func (q *Queries) DeleteIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, id)
	return err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE 
FROM recipes
WHERE id = ?
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const deleteRecipeIngredient = `-- name: DeleteRecipeIngredient :exec
DELETE
FROM recipe_ingredients
WHERE id = ?
`

func (q *Queries) DeleteRecipeIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeIngredient, id)
	return err
}

const getIngredient = `-- name: GetIngredient :one
SELECT i.id, i.name
FROM ingredients i
WHERE i.id = ?
`

func (q *Queries) GetIngredient(ctx context.Context, id int64) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getIngredientByName = `-- name: GetIngredientByName :one
SELECT i.id, i.name
FROM ingredients i
WHERE i.name LIKE ?
LIMIT 1
`

func (q *Queries) GetIngredientByName(ctx context.Context, name string) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredientByName, name)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getIngredients = `-- name: GetIngredients :many
SELECT i.id, i.name
FROM ingredients i
ORDER BY i.id DESC
`

func (q *Queries) GetIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipe = `-- name: GetRecipe :one
SELECT r.id, r.name
FROM recipes r
WHERE r.id = ? 
LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listRecipeIngredients = `-- name: ListRecipeIngredients :many
SELECT ri.id, ri.recipe_id, i.name, ri.unit_type, ri.percentage, ri.dependency
FROM recipe_ingredients ri
JOIN ingredients i ON i.id = ri.ingredient_id
WHERE ri.recipe_id = ?
`

type ListRecipeIngredientsRow struct {
	ID         int64
	RecipeID   int64
	Name       string
	UnitType   string
	Percentage float64
	Dependency string
}

func (q *Queries) ListRecipeIngredients(ctx context.Context, recipeID int64) ([]ListRecipeIngredientsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecipeIngredients, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecipeIngredientsRow
	for rows.Next() {
		var i ListRecipeIngredientsRow
		if err := rows.Scan(
			&i.ID,
			&i.RecipeID,
			&i.Name,
			&i.UnitType,
			&i.Percentage,
			&i.Dependency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT r.id, r.name
FROM recipes r
ORDER BY r.id DESC
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipesByIngredient = `-- name: ListRecipesByIngredient :many
SELECT r.id, r.name
FROM recipes r
JOIN recipe_ingredients ri ON ri.recipe_id = r.id
JOIN ingredients i ON i.id = ri.ingredient_id
WHERE i.id = ?
ORDER BY r.id DESC
`

func (q *Queries) ListRecipesByIngredient(ctx context.Context, id int64) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipesByIngredient, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients
SET 
  name = ?
WHERE id = ?
RETURNING id, name
`

type UpdateIngredientParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, updateIngredient, arg.Name, arg.ID)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes 
SET 
  name = ?
WHERE id = ?
RETURNING id, name
`

type UpdateRecipeParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, updateRecipe, arg.Name, arg.ID)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRecipeIngredient = `-- name: UpdateRecipeIngredient :one
UPDATE recipe_ingredients
SET 
  unit_type = ?,
  percentage = ?,
  dependency = ?
WHERE id = ?
RETURNING id, recipe_id, ingredient_id, unit_type, percentage, dependency
`

type UpdateRecipeIngredientParams struct {
	UnitType   string
	Percentage float64
	Dependency string
	ID         int64
}

func (q *Queries) UpdateRecipeIngredient(ctx context.Context, arg UpdateRecipeIngredientParams) (RecipeIngredient, error) {
	row := q.db.QueryRowContext(ctx, updateRecipeIngredient,
		arg.UnitType,
		arg.Percentage,
		arg.Dependency,
		arg.ID,
	)
	var i RecipeIngredient
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.IngredientID,
		&i.UnitType,
		&i.Percentage,
		&i.Dependency,
	)
	return i, err
}
