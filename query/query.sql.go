// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package query

import (
	"context"

	"github.com/simonklee/sourdough/recipe"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (
  name,
  kind
)
VALUES
  (?, ?)
RETURNING id, name, kind
`

type CreateIngredientParams struct {
	Name string
	Kind recipe.Kind
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.Name, arg.Kind)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name, &i.Kind)
	return i, err
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
  name
)
VALUES
  (?)
RETURNING id, name
`

func (q *Queries) CreateRecipe(ctx context.Context, name string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe, name)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createRecipeIngredient = `-- name: CreateRecipeIngredient :one
INSERT INTO recipe_ingredients (
  recipe_id,
  ingredient_id,
  prefer_unit_category,
  percentage,
  dependency
)
VALUES
  (?, ?, ?, ?, ?)
RETURNING id, recipe_id, ingredient_id, prefer_unit_category, percentage, dependency
`

type CreateRecipeIngredientParams struct {
	RecipeID           int64
	IngredientID       int64
	PreferUnitCategory recipe.UnitCategory
	Percentage         float64
	Dependency         string
}

func (q *Queries) CreateRecipeIngredient(ctx context.Context, arg CreateRecipeIngredientParams) (RecipeIngredient, error) {
	row := q.db.QueryRowContext(ctx, createRecipeIngredient,
		arg.RecipeID,
		arg.IngredientID,
		arg.PreferUnitCategory,
		arg.Percentage,
		arg.Dependency,
	)
	var i RecipeIngredient
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.IngredientID,
		&i.PreferUnitCategory,
		&i.Percentage,
		&i.Dependency,
	)
	return i, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE
  id = ?
`

func (q *Queries) DeleteIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, id)
	return err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE
  id = ?
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const deleteRecipeIngredient = `-- name: DeleteRecipeIngredient :exec
DELETE FROM recipe_ingredients
WHERE
  id = ?
`

func (q *Queries) DeleteRecipeIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeIngredient, id)
	return err
}

const getIngredient = `-- name: GetIngredient :one
SELECT
  i.id,
  i.name,
  i.kind
FROM ingredients AS i
WHERE
  i.id = ?
`

func (q *Queries) GetIngredient(ctx context.Context, id int64) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name, &i.Kind)
	return i, err
}

const getIngredientByName = `-- name: GetIngredientByName :one
SELECT
  i.id,
  i.name,
  i.kind
FROM ingredients AS i
WHERE
  i.name LIKE ?
LIMIT 1
`

func (q *Queries) GetIngredientByName(ctx context.Context, name string) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredientByName, name)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name, &i.Kind)
	return i, err
}

const getIngredients = `-- name: GetIngredients :many
SELECT
  i.id,
  i.name,
  i.kind
FROM ingredients AS i
ORDER BY
  i.id
`

func (q *Queries) GetIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(&i.ID, &i.Name, &i.Kind); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipe = `-- name: GetRecipe :one
SELECT
  r.id,
  r.name
FROM recipes AS r
WHERE
  r.id = ?
LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listRecipeIngredients = `-- name: ListRecipeIngredients :many
SELECT
  ri.id,
  ri.recipe_id,
  i.name,
  ri.prefer_unit_category,
  ri.percentage,
  ri.dependency,
  i.kind
FROM recipe_ingredients AS ri
JOIN ingredients AS i
  ON i.id = ri.ingredient_id
WHERE
  ri.recipe_id = ?
`

type ListRecipeIngredientsRow struct {
	ID                 int64
	RecipeID           int64
	Name               string
	PreferUnitCategory recipe.UnitCategory
	Percentage         float64
	Dependency         string
	Kind               recipe.Kind
}

func (q *Queries) ListRecipeIngredients(ctx context.Context, recipeID int64) ([]ListRecipeIngredientsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecipeIngredients, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecipeIngredientsRow
	for rows.Next() {
		var i ListRecipeIngredientsRow
		if err := rows.Scan(
			&i.ID,
			&i.RecipeID,
			&i.Name,
			&i.PreferUnitCategory,
			&i.Percentage,
			&i.Dependency,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT
  r.id,
  r.name
FROM recipes AS r
ORDER BY
  r.id
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipesByIngredient = `-- name: ListRecipesByIngredient :many
SELECT
  r.id,
  r.name
FROM recipes AS r
JOIN recipe_ingredients AS ri
  ON ri.recipe_id = r.id
JOIN ingredients AS i
  ON i.id = ri.ingredient_id
WHERE
  i.id = ?
ORDER BY
  r.id
`

func (q *Queries) ListRecipesByIngredient(ctx context.Context, id int64) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipesByIngredient, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients SET name = ?, kind = ?
WHERE
  id = ?
RETURNING id, name, kind
`

type UpdateIngredientParams struct {
	Name string
	Kind recipe.Kind
	ID   int64
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, updateIngredient, arg.Name, arg.Kind, arg.ID)
	var i Ingredient
	err := row.Scan(&i.ID, &i.Name, &i.Kind)
	return i, err
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes SET name = ?
WHERE
  id = ?
RETURNING id, name
`

type UpdateRecipeParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, updateRecipe, arg.Name, arg.ID)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRecipeIngredient = `-- name: UpdateRecipeIngredient :one
UPDATE recipe_ingredients SET prefer_unit_category = ?, percentage = ?, dependency = ?, ingredient_id = ?
WHERE
  id = ?
RETURNING id, recipe_id, ingredient_id, prefer_unit_category, percentage, dependency
`

type UpdateRecipeIngredientParams struct {
	PreferUnitCategory recipe.UnitCategory
	Percentage         float64
	Dependency         string
	IngredientID       int64
	ID                 int64
}

func (q *Queries) UpdateRecipeIngredient(ctx context.Context, arg UpdateRecipeIngredientParams) (RecipeIngredient, error) {
	row := q.db.QueryRowContext(ctx, updateRecipeIngredient,
		arg.PreferUnitCategory,
		arg.Percentage,
		arg.Dependency,
		arg.IngredientID,
		arg.ID,
	)
	var i RecipeIngredient
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.IngredientID,
		&i.PreferUnitCategory,
		&i.Percentage,
		&i.Dependency,
	)
	return i, err
}
